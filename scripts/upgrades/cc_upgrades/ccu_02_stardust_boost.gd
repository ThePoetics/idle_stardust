extends Upgrade
class_name CCU02StardustBoost
## CCU02 : Improves stardust generated per second. See Ep 11, "More CC Upgrades"

## Maximum upgrades
var max_level : int = 5

## Initialization values and handlers
func _init() -> void:
	level = Game.ref.data.cc_upgrades.u_02_stardust_boost_level
	base_cost = 1
	cost = 1
	if not is_unlocked():
		HandlerCCUpgrades.ref.u_01_stardust_generation.leveled_up.connect(_on_ccu01_level_up)

## Returns title of the upgrade
func title() -> String:
	var text : String = "Stardust Generator Efficiency"
	match level:
		0:
			text += ""
		1:
			text += " I"
		2:
			text += " II"
		3:
			text += " III"
		4:
			text += " IV"
		5:
			text += " V"
	return text

## Returns the description of the upgrade
func description() -> String:
	var text : String = "Increases the amount of passive Stardust generated by the Universe per second."
	text += "\n[b]Effects :[/b] +1 Stardust per second"
	if level < max_level:
		text += "\n[b]Cost :[/b] %s Consciousness Core" %cost
	return text

## Returns whether the upgrade is available and affordable
func can_afford() -> bool:
	if level >= max_level:
		return false
	if Game.ref.data.consciousness_core >= cost:
		return true
	return false

## Consumes CCs, increments upgrade level
func level_up() -> void:
	if level >= max_level:
		return
	var error : Error = HandlerConsciousnessCore.ref.consume_consciousness_core(cost)
	if error:
		return
	level += 1
	Game.ref.data.cc_upgrades.u_02_stardust_boost_level = level
	leveled_up.emit()
	HandlerCCUpgrades.ref.upgrade_leveled_up.emit(self)

## Set unlock state based on whether CCU01 has been purchased
func is_unlocked() -> bool:
	if Game.ref.data.cc_upgrades.u_01_stardust_generation_level:
		return true
	return false

## Triggered when CCU01 is purchased, unlocks this upgrade
func _on_ccu01_level_up() -> void:
	HandlerCCUpgrades.ref.u_01_stardust_generation.leveled_up.disconnect(_on_ccu01_level_up)
	HandlerCCUpgrades.ref.upgrade_unlocked.emit(self)

## Returns whether or not an upgrade is disabled
func is_disabled() -> bool:
	if level >= max_level:
		return true
	return false
